<?php
/**
 * ReportDataAutoteka
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Авито API для бизнеса
 *
 * ## Общая информация Описание API произведено в формате [**Swagger 3.0**](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md). Вы можете использовать данный файл для ознакомления с методами API, а также для генерации базового кода для работы с API на удобном для вас языке программирования с помощью утилиты [**Swagger Codegen**](https://swagger.io/swagger-codegen/) или online сервиса [**Swagger Editor**](https://editor.swagger.io/).  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://api.avito.ru/docs/public/APITermsOfServiceV1.pdf).**  По всем вопросам работы с API необходимо обращаться в Службу Поддержки профессиональных инструментов:  <li>телефон: <b>+7 495 777-10-66</b></li> <li>email: <a href=\"mailto:supportautoload@avito.ru\">supportautoload@avito.ru</a></li>
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReportDataAutoteka Class Doc Comment
 *
 * @category Class
 * @description Предстваление отчета для партнерского API
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportDataAutoteka implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReportDataAutoteka';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'avito_items' => '\Swagger\Client\Model\AvitoItemAutoteka[]',
'car_image' => '\Swagger\Client\Model\CarImageAutoteka',
'crashes_history' => '\Swagger\Client\Model\CrashesHistoryAutoteka[]',
'equipment' => '\Swagger\Client\Model\EquipmentAutoteka',
'events' => '\Swagger\Client\Model\EventsAutoteka',
'events_others_history' => '\Swagger\Client\Model\EventsOthersHistoryAutoteka[]',
'head' => '\Swagger\Client\Model\HeadAutoteka',
'other' => '\Swagger\Client\Model\OtherAutoteka[]',
'owners_history' => '\Swagger\Client\Model\OwnersHistoryAutoteka[]',
'restrictions' => '\Swagger\Client\Model\RestrictionsAutoteka',
'service_info' => '\Swagger\Client\Model\ServiceInfoAutoteka'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'avito_items' => null,
'car_image' => null,
'crashes_history' => null,
'equipment' => null,
'events' => null,
'events_others_history' => null,
'head' => null,
'other' => null,
'owners_history' => null,
'restrictions' => null,
'service_info' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'avito_items' => 'avitoItems',
'car_image' => 'carImage',
'crashes_history' => 'crashesHistory',
'equipment' => 'equipment',
'events' => 'events',
'events_others_history' => 'eventsOthersHistory',
'head' => 'head',
'other' => 'other',
'owners_history' => 'ownersHistory',
'restrictions' => 'restrictions',
'service_info' => 'serviceInfo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'avito_items' => 'setAvitoItems',
'car_image' => 'setCarImage',
'crashes_history' => 'setCrashesHistory',
'equipment' => 'setEquipment',
'events' => 'setEvents',
'events_others_history' => 'setEventsOthersHistory',
'head' => 'setHead',
'other' => 'setOther',
'owners_history' => 'setOwnersHistory',
'restrictions' => 'setRestrictions',
'service_info' => 'setServiceInfo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'avito_items' => 'getAvitoItems',
'car_image' => 'getCarImage',
'crashes_history' => 'getCrashesHistory',
'equipment' => 'getEquipment',
'events' => 'getEvents',
'events_others_history' => 'getEventsOthersHistory',
'head' => 'getHead',
'other' => 'getOther',
'owners_history' => 'getOwnersHistory',
'restrictions' => 'getRestrictions',
'service_info' => 'getServiceInfo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['avito_items'] = isset($data['avito_items']) ? $data['avito_items'] : null;
        $this->container['car_image'] = isset($data['car_image']) ? $data['car_image'] : null;
        $this->container['crashes_history'] = isset($data['crashes_history']) ? $data['crashes_history'] : null;
        $this->container['equipment'] = isset($data['equipment']) ? $data['equipment'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['events_others_history'] = isset($data['events_others_history']) ? $data['events_others_history'] : null;
        $this->container['head'] = isset($data['head']) ? $data['head'] : null;
        $this->container['other'] = isset($data['other']) ? $data['other'] : null;
        $this->container['owners_history'] = isset($data['owners_history']) ? $data['owners_history'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
        $this->container['service_info'] = isset($data['service_info']) ? $data['service_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets avito_items
     *
     * @return \Swagger\Client\Model\AvitoItemAutoteka[]
     */
    public function getAvitoItems()
    {
        return $this->container['avito_items'];
    }

    /**
     * Sets avito_items
     *
     * @param \Swagger\Client\Model\AvitoItemAutoteka[] $avito_items история публикации на avito.ru
     *
     * @return $this
     */
    public function setAvitoItems($avito_items)
    {
        $this->container['avito_items'] = $avito_items;

        return $this;
    }

    /**
     * Gets car_image
     *
     * @return \Swagger\Client\Model\CarImageAutoteka
     */
    public function getCarImage()
    {
        return $this->container['car_image'];
    }

    /**
     * Sets car_image
     *
     * @param \Swagger\Client\Model\CarImageAutoteka $car_image car_image
     *
     * @return $this
     */
    public function setCarImage($car_image)
    {
        $this->container['car_image'] = $car_image;

        return $this;
    }

    /**
     * Gets crashes_history
     *
     * @return \Swagger\Client\Model\CrashesHistoryAutoteka[]
     */
    public function getCrashesHistory()
    {
        return $this->container['crashes_history'];
    }

    /**
     * Sets crashes_history
     *
     * @param \Swagger\Client\Model\CrashesHistoryAutoteka[] $crashes_history Подробная детализация ДТП
     *
     * @return $this
     */
    public function setCrashesHistory($crashes_history)
    {
        $this->container['crashes_history'] = $crashes_history;

        return $this;
    }

    /**
     * Gets equipment
     *
     * @return \Swagger\Client\Model\EquipmentAutoteka
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     *
     * @param \Swagger\Client\Model\EquipmentAutoteka $equipment equipment
     *
     * @return $this
     */
    public function setEquipment($equipment)
    {
        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Swagger\Client\Model\EventsAutoteka
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Swagger\Client\Model\EventsAutoteka $events events
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets events_others_history
     *
     * @return \Swagger\Client\Model\EventsOthersHistoryAutoteka[]
     */
    public function getEventsOthersHistory()
    {
        return $this->container['events_others_history'];
    }

    /**
     * Sets events_others_history
     *
     * @param \Swagger\Client\Model\EventsOthersHistoryAutoteka[] $events_others_history история влпдения включающее все события поизошедшие с авто
     *
     * @return $this
     */
    public function setEventsOthersHistory($events_others_history)
    {
        $this->container['events_others_history'] = $events_others_history;

        return $this;
    }

    /**
     * Gets head
     *
     * @return \Swagger\Client\Model\HeadAutoteka
     */
    public function getHead()
    {
        return $this->container['head'];
    }

    /**
     * Sets head
     *
     * @param \Swagger\Client\Model\HeadAutoteka $head head
     *
     * @return $this
     */
    public function setHead($head)
    {
        $this->container['head'] = $head;

        return $this;
    }

    /**
     * Gets other
     *
     * @return \Swagger\Client\Model\OtherAutoteka[]
     */
    public function getOther()
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     *
     * @param \Swagger\Client\Model\OtherAutoteka[] $other разное
     *
     * @return $this
     */
    public function setOther($other)
    {
        $this->container['other'] = $other;

        return $this;
    }

    /**
     * Gets owners_history
     *
     * @return \Swagger\Client\Model\OwnersHistoryAutoteka[]
     */
    public function getOwnersHistory()
    {
        return $this->container['owners_history'];
    }

    /**
     * Sets owners_history
     *
     * @param \Swagger\Client\Model\OwnersHistoryAutoteka[] $owners_history История регистраций авто
     *
     * @return $this
     */
    public function setOwnersHistory($owners_history)
    {
        $this->container['owners_history'] = $owners_history;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \Swagger\Client\Model\RestrictionsAutoteka
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \Swagger\Client\Model\RestrictionsAutoteka $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets service_info
     *
     * @return \Swagger\Client\Model\ServiceInfoAutoteka
     */
    public function getServiceInfo()
    {
        return $this->container['service_info'];
    }

    /**
     * Sets service_info
     *
     * @param \Swagger\Client\Model\ServiceInfoAutoteka $service_info service_info
     *
     * @return $this
     */
    public function setServiceInfo($service_info)
    {
        $this->container['service_info'] = $service_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
