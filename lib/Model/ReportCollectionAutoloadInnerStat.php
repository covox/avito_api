<?php
/**
 * ReportCollectionAutoloadInnerStat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Авито API для бизнеса
 *
 * ## Общая информация Описание API произведено в формате [**Swagger 3.0**](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md). Вы можете использовать данный файл для ознакомления с методами API, а также для генерации базового кода для работы с API на удобном для вас языке программирования с помощью утилиты [**Swagger Codegen**](https://swagger.io/swagger-codegen/) или online сервиса [**Swagger Editor**](https://editor.swagger.io/).  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://api.avito.ru/docs/public/APITermsOfServiceV1.pdf).**  По всем вопросам работы с API необходимо обращаться в Службу Поддержки профессиональных инструментов:  <li>телефон: <b>+7 495 777-10-66</b></li> <li>email: <a href=\"mailto:supportautoload@avito.ru\">supportautoload@avito.ru</a></li>
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReportCollectionAutoloadInnerStat Class Doc Comment
 *
 * @category Class
 * @description Суммарная статистика по объявлению в данном отчете
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportCollectionAutoloadInnerStat implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReportCollectionAutoload_inner_stat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vas' => 'int',
'success' => 'int',
'error_fee' => 'int',
'error' => 'int',
'unknown' => 'int',
'stopped' => 'int',
'published' => 'int',
'fees' => 'int',
'total' => 'int',
'problem' => 'int',
'problem_obsolete' => 'int',
'duplicate' => 'int',
'publish_later' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vas' => null,
'success' => null,
'error_fee' => null,
'error' => null,
'unknown' => null,
'stopped' => null,
'published' => null,
'fees' => null,
'total' => null,
'problem' => null,
'problem_obsolete' => null,
'duplicate' => null,
'publish_later' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vas' => 'vas',
'success' => 'success',
'error_fee' => 'error_fee',
'error' => 'error',
'unknown' => 'unknown',
'stopped' => 'stopped',
'published' => 'published',
'fees' => 'fees',
'total' => 'total',
'problem' => 'problem',
'problem_obsolete' => 'problem_obsolete',
'duplicate' => 'duplicate',
'publish_later' => 'publish_later'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vas' => 'setVas',
'success' => 'setSuccess',
'error_fee' => 'setErrorFee',
'error' => 'setError',
'unknown' => 'setUnknown',
'stopped' => 'setStopped',
'published' => 'setPublished',
'fees' => 'setFees',
'total' => 'setTotal',
'problem' => 'setProblem',
'problem_obsolete' => 'setProblemObsolete',
'duplicate' => 'setDuplicate',
'publish_later' => 'setPublishLater'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vas' => 'getVas',
'success' => 'getSuccess',
'error_fee' => 'getErrorFee',
'error' => 'getError',
'unknown' => 'getUnknown',
'stopped' => 'getStopped',
'published' => 'getPublished',
'fees' => 'getFees',
'total' => 'getTotal',
'problem' => 'getProblem',
'problem_obsolete' => 'getProblemObsolete',
'duplicate' => 'getDuplicate',
'publish_later' => 'getPublishLater'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vas'] = isset($data['vas']) ? $data['vas'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['error_fee'] = isset($data['error_fee']) ? $data['error_fee'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['unknown'] = isset($data['unknown']) ? $data['unknown'] : null;
        $this->container['stopped'] = isset($data['stopped']) ? $data['stopped'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['problem'] = isset($data['problem']) ? $data['problem'] : null;
        $this->container['problem_obsolete'] = isset($data['problem_obsolete']) ? $data['problem_obsolete'] : null;
        $this->container['duplicate'] = isset($data['duplicate']) ? $data['duplicate'] : null;
        $this->container['publish_later'] = isset($data['publish_later']) ? $data['publish_later'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vas
     *
     * @return int
     */
    public function getVas()
    {
        return $this->container['vas'];
    }

    /**
     * Sets vas
     *
     * @param int $vas К скольким объявлениям применены VAS-услуги
     *
     * @return $this
     */
    public function setVas($vas)
    {
        $this->container['vas'] = $vas;

        return $this;
    }

    /**
     * Gets success
     *
     * @return int
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param int $success Сколько успешно опубликовано на сайте
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets error_fee
     *
     * @return int
     */
    public function getErrorFee()
    {
        return $this->container['error_fee'];
    }

    /**
     * Sets error_fee
     *
     * @param int $error_fee Сколько не опубликовано из-за отсуствия средств
     *
     * @return $this
     */
    public function setErrorFee($error_fee)
    {
        $this->container['error_fee'] = $error_fee;

        return $this;
    }

    /**
     * Gets error
     *
     * @return int
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param int $error Сколько не опубликовано из-за ошибок
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets unknown
     *
     * @return int
     */
    public function getUnknown()
    {
        return $this->container['unknown'];
    }

    /**
     * Sets unknown
     *
     * @param int $unknown Неизвестный статус обработки
     *
     * @return $this
     */
    public function setUnknown($unknown)
    {
        $this->container['unknown'] = $unknown;

        return $this;
    }

    /**
     * Gets stopped
     *
     * @return int
     */
    public function getStopped()
    {
        return $this->container['stopped'];
    }

    /**
     * Sets stopped
     *
     * @param int $stopped Сколько остановлено
     *
     * @return $this
     */
    public function setStopped($stopped)
    {
        $this->container['stopped'] = $stopped;

        return $this;
    }

    /**
     * Gets published
     *
     * @return int
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param int $published Сколько опубликовано на сайте
     *
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return int
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param int $fees Сколько платных
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total Всего объявлений в пакете
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets problem
     *
     * @return int
     */
    public function getProblem()
    {
        return $this->container['problem'];
    }

    /**
     * Sets problem
     *
     * @param int $problem Сколько с незначительными проблемами
     *
     * @return $this
     */
    public function setProblem($problem)
    {
        $this->container['problem'] = $problem;

        return $this;
    }

    /**
     * Gets problem_obsolete
     *
     * @return int
     */
    public function getProblemObsolete()
    {
        return $this->container['problem_obsolete'];
    }

    /**
     * Sets problem_obsolete
     *
     * @param int $problem_obsolete Сколько в устаревшем формате или с устаревшими элементами
     *
     * @return $this
     */
    public function setProblemObsolete($problem_obsolete)
    {
        $this->container['problem_obsolete'] = $problem_obsolete;

        return $this;
    }

    /**
     * Gets duplicate
     *
     * @return int
     */
    public function getDuplicate()
    {
        return $this->container['duplicate'];
    }

    /**
     * Sets duplicate
     *
     * @param int $duplicate Сколько с одинаковым описанием
     *
     * @return $this
     */
    public function setDuplicate($duplicate)
    {
        $this->container['duplicate'] = $duplicate;

        return $this;
    }

    /**
     * Gets publish_later
     *
     * @return int
     */
    public function getPublishLater()
    {
        return $this->container['publish_later'];
    }

    /**
     * Sets publish_later
     *
     * @param int $publish_later Сколько будут опубликованы позже
     *
     * @return $this
     */
    public function setPublishLater($publish_later)
    {
        $this->container['publish_later'] = $publish_later;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
