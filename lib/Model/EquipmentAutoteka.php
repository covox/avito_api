<?php
/**
 * EquipmentAutoteka
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Авито API для бизнеса
 *
 * ## Общая информация Описание API произведено в формате [**Swagger 3.0**](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md). Вы можете использовать данный файл для ознакомления с методами API, а также для генерации базового кода для работы с API на удобном для вас языке программирования с помощью утилиты [**Swagger Codegen**](https://swagger.io/swagger-codegen/) или online сервиса [**Swagger Editor**](https://editor.swagger.io/).  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://api.avito.ru/docs/public/APITermsOfServiceV1.pdf).**  По всем вопросам работы с API необходимо обращаться в Службу Поддержки профессиональных инструментов:  <li>телефон: <b>+7 495 777-10-66</b></li> <li>email: <a href=\"mailto:supportautoload@avito.ru\">supportautoload@avito.ru</a></li>
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EquipmentAutoteka Class Doc Comment
 *
 * @category Class
 * @description Комплектация авто
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EquipmentAutoteka implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EquipmentAutoteka';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'body' => '\Swagger\Client\Model\EquipmentAutotekaBody',
'brand' => '\Swagger\Client\Model\EquipmentAutotekaBrand',
'color' => '\Swagger\Client\Model\EquipmentAutotekaColor',
'drive' => '\Swagger\Client\Model\EquipmentAutotekaDrive',
'equipment' => '\Swagger\Client\Model\EquipmentAutotekaEquipment',
'horsepower' => '\Swagger\Client\Model\EquipmentAutotekaHorsepower',
'model' => '\Swagger\Client\Model\EquipmentAutotekaModel',
'modification' => '\Swagger\Client\Model\EquipmentAutotekaModification',
'transmission' => '\Swagger\Client\Model\EquipmentAutotekaTransmission',
'vehicle' => '\Swagger\Client\Model\EquipmentAutotekaVehicle',
'volume' => '\Swagger\Client\Model\EquipmentAutotekaVolume',
'year' => '\Swagger\Client\Model\EquipmentAutotekaYear'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'body' => null,
'brand' => null,
'color' => null,
'drive' => null,
'equipment' => null,
'horsepower' => null,
'model' => null,
'modification' => null,
'transmission' => null,
'vehicle' => null,
'volume' => null,
'year' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
'brand' => 'brand',
'color' => 'color',
'drive' => 'drive',
'equipment' => 'equipment',
'horsepower' => 'horsepower',
'model' => 'model',
'modification' => 'modification',
'transmission' => 'transmission',
'vehicle' => 'vehicle',
'volume' => 'volume',
'year' => 'year'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
'brand' => 'setBrand',
'color' => 'setColor',
'drive' => 'setDrive',
'equipment' => 'setEquipment',
'horsepower' => 'setHorsepower',
'model' => 'setModel',
'modification' => 'setModification',
'transmission' => 'setTransmission',
'vehicle' => 'setVehicle',
'volume' => 'setVolume',
'year' => 'setYear'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
'brand' => 'getBrand',
'color' => 'getColor',
'drive' => 'getDrive',
'equipment' => 'getEquipment',
'horsepower' => 'getHorsepower',
'model' => 'getModel',
'modification' => 'getModification',
'transmission' => 'getTransmission',
'vehicle' => 'getVehicle',
'volume' => 'getVolume',
'year' => 'getYear'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['drive'] = isset($data['drive']) ? $data['drive'] : null;
        $this->container['equipment'] = isset($data['equipment']) ? $data['equipment'] : null;
        $this->container['horsepower'] = isset($data['horsepower']) ? $data['horsepower'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['modification'] = isset($data['modification']) ? $data['modification'] : null;
        $this->container['transmission'] = isset($data['transmission']) ? $data['transmission'] : null;
        $this->container['vehicle'] = isset($data['vehicle']) ? $data['vehicle'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaBody
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaBody $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaBrand
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaBrand $brand brand
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets color
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaColor
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaColor $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets drive
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaDrive
     */
    public function getDrive()
    {
        return $this->container['drive'];
    }

    /**
     * Sets drive
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaDrive $drive drive
     *
     * @return $this
     */
    public function setDrive($drive)
    {
        $this->container['drive'] = $drive;

        return $this;
    }

    /**
     * Gets equipment
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaEquipment
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaEquipment $equipment equipment
     *
     * @return $this
     */
    public function setEquipment($equipment)
    {
        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets horsepower
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaHorsepower
     */
    public function getHorsepower()
    {
        return $this->container['horsepower'];
    }

    /**
     * Sets horsepower
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaHorsepower $horsepower horsepower
     *
     * @return $this
     */
    public function setHorsepower($horsepower)
    {
        $this->container['horsepower'] = $horsepower;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaModel
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaModel $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets modification
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaModification
     */
    public function getModification()
    {
        return $this->container['modification'];
    }

    /**
     * Sets modification
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaModification $modification modification
     *
     * @return $this
     */
    public function setModification($modification)
    {
        $this->container['modification'] = $modification;

        return $this;
    }

    /**
     * Gets transmission
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaTransmission
     */
    public function getTransmission()
    {
        return $this->container['transmission'];
    }

    /**
     * Sets transmission
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaTransmission $transmission transmission
     *
     * @return $this
     */
    public function setTransmission($transmission)
    {
        $this->container['transmission'] = $transmission;

        return $this;
    }

    /**
     * Gets vehicle
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaVehicle
     */
    public function getVehicle()
    {
        return $this->container['vehicle'];
    }

    /**
     * Sets vehicle
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaVehicle $vehicle vehicle
     *
     * @return $this
     */
    public function setVehicle($vehicle)
    {
        $this->container['vehicle'] = $vehicle;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaVolume
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaVolume $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets year
     *
     * @return \Swagger\Client\Model\EquipmentAutotekaYear
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param \Swagger\Client\Model\EquipmentAutotekaYear $year year
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
