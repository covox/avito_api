<?php
/**
 * SimplifiedResume
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Авито API для бизнеса
 *
 * ## Общая информация Описание API произведено в формате [**Swagger 3.0**](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md). Вы можете использовать данный файл для ознакомления с методами API, а также для генерации базового кода для работы с API на удобном для вас языке программирования с помощью утилиты [**Swagger Codegen**](https://swagger.io/swagger-codegen/) или online сервиса [**Swagger Editor**](https://editor.swagger.io/).  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://api.avito.ru/docs/public/APITermsOfServiceV1.pdf).**  По всем вопросам работы с API необходимо обращаться в Службу Поддержки профессиональных инструментов:  <li>телефон: <b>+7 495 777-10-66</b></li> <li>email: <a href=\"mailto:supportautoload@avito.ru\">supportautoload@avito.ru</a></li>
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SimplifiedResume Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SimplifiedResume implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SimplifiedResume';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'title' => 'string',
'specialization' => '\Swagger\Client\Model\Specialization',
'salary' => 'float',
'location' => '\Swagger\Client\Model\Location',
'age' => 'int',
'education_level' => '\Swagger\Client\Model\EducationLevel',
'gender' => '\Swagger\Client\Model\Gender',
'total_experience' => 'int',
'is_purchased' => 'bool',
'created' => '\DateTime',
'updated' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'title' => null,
'specialization' => null,
'salary' => 'float',
'location' => null,
'age' => 'int32',
'education_level' => null,
'gender' => null,
'total_experience' => 'int32',
'is_purchased' => null,
'created' => 'date-time',
'updated' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'title' => 'title',
'specialization' => 'specialization',
'salary' => 'salary',
'location' => 'location',
'age' => 'age',
'education_level' => 'education_level',
'gender' => 'gender',
'total_experience' => 'total_experience',
'is_purchased' => 'is_purchased',
'created' => 'created',
'updated' => 'updated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'title' => 'setTitle',
'specialization' => 'setSpecialization',
'salary' => 'setSalary',
'location' => 'setLocation',
'age' => 'setAge',
'education_level' => 'setEducationLevel',
'gender' => 'setGender',
'total_experience' => 'setTotalExperience',
'is_purchased' => 'setIsPurchased',
'created' => 'setCreated',
'updated' => 'setUpdated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'title' => 'getTitle',
'specialization' => 'getSpecialization',
'salary' => 'getSalary',
'location' => 'getLocation',
'age' => 'getAge',
'education_level' => 'getEducationLevel',
'gender' => 'getGender',
'total_experience' => 'getTotalExperience',
'is_purchased' => 'getIsPurchased',
'created' => 'getCreated',
'updated' => 'getUpdated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['specialization'] = isset($data['specialization']) ? $data['specialization'] : null;
        $this->container['salary'] = isset($data['salary']) ? $data['salary'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
        $this->container['education_level'] = isset($data['education_level']) ? $data['education_level'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['total_experience'] = isset($data['total_experience']) ? $data['total_experience'] : null;
        $this->container['is_purchased'] = isset($data['is_purchased']) ? $data['is_purchased'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets specialization
     *
     * @return \Swagger\Client\Model\Specialization
     */
    public function getSpecialization()
    {
        return $this->container['specialization'];
    }

    /**
     * Sets specialization
     *
     * @param \Swagger\Client\Model\Specialization $specialization specialization
     *
     * @return $this
     */
    public function setSpecialization($specialization)
    {
        $this->container['specialization'] = $specialization;

        return $this;
    }

    /**
     * Gets salary
     *
     * @return float
     */
    public function getSalary()
    {
        return $this->container['salary'];
    }

    /**
     * Sets salary
     *
     * @param float $salary salary
     *
     * @return $this
     */
    public function setSalary($salary)
    {
        $this->container['salary'] = $salary;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int $age age
     *
     * @return $this
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets education_level
     *
     * @return \Swagger\Client\Model\EducationLevel
     */
    public function getEducationLevel()
    {
        return $this->container['education_level'];
    }

    /**
     * Sets education_level
     *
     * @param \Swagger\Client\Model\EducationLevel $education_level education_level
     *
     * @return $this
     */
    public function setEducationLevel($education_level)
    {
        $this->container['education_level'] = $education_level;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \Swagger\Client\Model\Gender
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \Swagger\Client\Model\Gender $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets total_experience
     *
     * @return int
     */
    public function getTotalExperience()
    {
        return $this->container['total_experience'];
    }

    /**
     * Sets total_experience
     *
     * @param int $total_experience total_experience
     *
     * @return $this
     */
    public function setTotalExperience($total_experience)
    {
        $this->container['total_experience'] = $total_experience;

        return $this;
    }

    /**
     * Gets is_purchased
     *
     * @return bool
     */
    public function getIsPurchased()
    {
        return $this->container['is_purchased'];
    }

    /**
     * Sets is_purchased
     *
     * @param bool $is_purchased is_purchased
     *
     * @return $this
     */
    public function setIsPurchased($is_purchased)
    {
        $this->container['is_purchased'] = $is_purchased;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
